@page "/smart-meters"
@using ClearKilovat.Models.Entity
@using Radzen
@using Radzen.Blazor
@rendermode InteractiveServer

<h3 style="margin-bottom:1rem; color: #2a5d2a;">Список умных счётчиков (Тестовые данные)</h3>


<RadzenDataGrid Data="@Readings" TItem="SmartMeterReading"
                RowClick="@OnRowClick"
                PageSize="10"
                AllowPaging="true">
    <Columns>
        <RadzenDataGridColumn TItem="SmartMeterReading" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="SmartMeterReading" Property="SmartMeterId" Title="Smart Meter ID" />
        <RadzenDataGridColumn TItem="SmartMeterReading" Title="Timestamp">
            <Template Context="r">
                @r.Timestamp.ToString("yyyy-MM-dd HH:mm")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SmartMeterReading" Property="ConsumptionKwh" Title="Consumption (kWh)" />
    </Columns>
</RadzenDataGrid>


@if (SelectedMeterReadings.Any())
{
    <h4 style="margin-top:30px; color:#2a5d2a;">График по счётчику ID: @SelectedMeterId</h4>

    <RadzenChart Style="height:450px;">
        <RadzenLineSeries Data="@SelectedMeterReadings"
                          CategoryProperty="Timestamp"
                          ValueProperty="ConsumptionKwh"
                          Title="Потребление" />

        <RadzenLineSeries Data="@RegressionPoints"
                          CategoryProperty="Timestamp"
                          ValueProperty="ConsumptionKwh"
                          Title="Линейная регрессия"
                          StrokeWidth="3"
                          Stroke="gray" />

        <RadzenCategoryAxis FormatString="{0:HH:mm}" />
        <RadzenValueAxis />
    </RadzenChart>
}



@code {
    private List<SmartMeterReading> Readings { get; set; } = new();
    private List<SmartMeterReading> SelectedMeterReadings { get; set; } = new();
    private List<SmartMeterReading> RegressionPoints { get; set; } = new();
    private int? SelectedMeterId { get; set; }

    

    private void GenerateTestData()
    {
        var random = new Random();
        var baseTime = DateTime.UtcNow.Date.AddDays(-1);
        int id = 1;

        for (int hour = 0; hour < 24; hour++)
        {
            for (int meterId = 1; meterId <= 5; meterId++)
            {
                Readings.Add(new SmartMeterReading
                {
                    Id = id++,
                    SmartMeterId = meterId,
                    Timestamp = baseTime.AddHours(hour),
                    ConsumptionKwh = Math.Round((decimal)(random.NextDouble() * 5 + 1), 2)
                });
            }
        }
    }

    private void OnRowClick(DataGridRowMouseEventArgs<SmartMeterReading> args)
    {
        SelectedMeterId = args.Data.SmartMeterId;
        SelectedMeterReadings = Readings
            .Where(r => r.SmartMeterId == SelectedMeterId)
            .OrderBy(r => r.Timestamp)
            .ToList();

        CalculateRegression(SelectedMeterReadings);
    }

    private void CalculateRegression(List<SmartMeterReading> input)
    {
        RegressionPoints.Clear();

        if (input.Count < 2)
            return;

        var timestamps = input.Select(r => r.Timestamp.Subtract(input[0].Timestamp).TotalHours).ToArray();
        var values = input.Select(r => (double)r.ConsumptionKwh).ToArray();

        double xAvg = timestamps.Average();
        double yAvg = values.Average();

        double numerator = 0;
        double denominator = 0;

        for (int i = 0; i < timestamps.Length; i++)
        {
            numerator += (timestamps[i] - xAvg) * (values[i] - yAvg);
            denominator += Math.Pow(timestamps[i] - xAvg, 2);
        }

        double slope = numerator / denominator;
        double intercept = yAvg - slope * xAvg;

        RegressionPoints = input.Select((r, i) => new SmartMeterReading
        {
            Timestamp = r.Timestamp,
            ConsumptionKwh = (decimal)(slope * timestamps[i] + intercept)
        }).ToList();
    }
   

    protected override void OnInitialized()
    {
        GenerateTestData();
        CalculateLinearRegression();
    }

   
    private void CalculateLinearRegression()
    {
        if (!Readings.Any()) return;

        var ordered = Readings.OrderBy(r => r.Timestamp).ToList();
        var timestamps = ordered.Select(r => r.Timestamp.Subtract(ordered[0].Timestamp).TotalHours).ToArray();
        var values = ordered.Select(r => (double)r.ConsumptionKwh).ToArray();

        double xAvg = timestamps.Average();
        double yAvg = values.Average();

        double numerator = 0;
        double denominator = 0;

        for (int i = 0; i < timestamps.Length; i++)
        {
            numerator += (timestamps[i] - xAvg) * (values[i] - yAvg);
            denominator += Math.Pow(timestamps[i] - xAvg, 2);
        }

        double slope = numerator / denominator;
        double intercept = yAvg - slope * xAvg;

        RegressionPoints = ordered.Select((r, i) => new SmartMeterReading
        {
            Timestamp = r.Timestamp,
            ConsumptionKwh = (decimal)(slope * timestamps[i] + intercept)
        }).ToList();
    }
}